project_name:
  type: str
  help: What is the name of the project?
  default: space-monkey
  validator: |
    {% if project_name|length < 4 or project_name|length > 40 %}
    project_name must be between 4 and 40 characters
    {% endif %}
    {% if not (project_name | regex_search('^[a-z][a-z0-9\-]+$')) %}
    project_name must start with a letter, followed one or more letters, digits or dashes (all lowercase).
    {% endif %}

project_summary:
  type: str
  help: Provide a short summary of the project.
  default: It's a trial run

author_name:
  type: str
  help: What is the author's name?
  default: Jesse McGraw

author_email:
  type: str
  help: What is the author's email address?
  default: jlmcgraw@gmail.com

module_name:
  type: str
  help: What is the Python module name?
  default: "{{ project_name.replace('-', '_') }}"
  validator: |
    {% if module_name|length < 4 or module_name|length > 40 %}
    module_name must be between 4 and 40 characters
    {% endif %}
    {% if not (module_name | regex_search('^[a-z][a-z0-9_]+$')) %}
    module_name must start with a letter, followed one or more letters, digits or underscores (all lowercase).
    {% endif %}

python_versions:
  type: str
  help: What Python versions will be supported?
  default:
    - "3.10"
    - "3.11"
    - "3.12"
    - "3.13"
    - "3.14"
  multiselect: true
  choices:
    - "3.10"
    - "3.11"
    - "3.12"
    - "3.13"
    - "3.14"
  validator: |
    {% set all_ver = ["3.10", "3.11", "3.12", "3.13", "3.14"] %}
    {% if all_ver.index(python_versions[-1]) - all_ver.index(python_versions[0]) + 1 != python_versions|length %}
    python_versions must be a consecutive list of versions
    {% endif %}

default_python_version:
  type: str
  help: What is the default Python version to use?
  default: "{{python_versions[-1]}}"
  choices: |
    {% for ver in python_versions %}
    - "{{ver}}"
    {% endfor %}

run_qa_checks:
  type: bool
  help: Should I run quality checks after building?
  default: false

initialize_git:
  type: bool
  help: Should I initialize this project as a git repository?
  default: true

push_to_github:
  type: bool
  help: Should I publish this project to github?
  default: "{{ initialize_git }}"
  when: "{{ initialize_git }}"

github_account:
  type: str
  help: What is the github account I should use?
  default: jlmcgraw
  when: "{{ push_to_github }}"


_subdirectory: template

# These should probably only trigger on new projects not updates
_tasks:
  - working_directory: "{{ project_name }}"
    command: "gh auth status 2>&1 | grep {{ github_account }}"
    when: "{{ push_to_github }}"
  - working_directory: "{{ project_name }}"
    command: "uv sync"
  - working_directory: "{{ project_name }}"
    command: "make qa/full"
    when: "{{ run_qa_checks }}"
  - working_directory: "{{ project_name }}"
    command: "git init ."
    when: "{{ initialize_git }}"
  - working_directory: "{{ project_name }}"
    command: "git add README.md"
    when: "{{ initialize_git }}"
  - working_directory: "{{ project_name }}"
    command: "git commit -m 'Initial Commit'"
    when: "{{ initialize_git }}"
  - working_directory: "{{ project_name }}"
    command: "git add ."
    when: "{{ initialize_git }}"
  - working_directory: "{{ project_name }}"
    command: "git commit -m 'feat: Bootstrapped the {{ project_name }} project'"
    when: "{{ initialize_git }}"
  - working_directory: "{{ project_name }}"
    command: >
      gh repo create
      --description="{{ project_summary }}"
      --source=.
      --homepage="https://{{ github_account }}.github.io/{{ project_name }}"
      --public
      {{ project_name }}
    when: "{{ push_to_github }}"
  - working_directory: "{{ project_name }}"
    command: "git push -u origin main"
    when: "{{ push_to_github }}"
  - working_directory: "{{ project_name }}"
    command: >
      while [ -z "$(gh run list --json databaseId,name | jq '.[] | select(.name == "build-docs")')" ]; do
        echo "Waiting for docs build action to start" && sleep 1;
      done
    when: "{{ push_to_github }}"
  - working_directory: "{{ project_name }}"
    command: >
      gh run list --json databaseId,name
      | jq '.[] | select(.name == "build-docs")'
      | jq '.databaseId'
      | xargs gh run watch --exit-status
    when: "{{ push_to_github }}"
  - working_directory: "{{ project_name }}"
    command: >
      gh api
      --silent
      --method=POST
      -H "Accept: application/vnd.github+json"
      "/repos/{{ github_account }}/{{ project_name }}/pages"
      -f "source[branch]=gh-pages"
      -f "source[path]=/"
      -f "build_type=legacy"
    when: "{{ push_to_github }}"
  - working_directory: "{{ project_name }}"
    command: >
      while [ -z "$(gh run list --json databaseId,name | jq '.[] | select(.name == "pages build and deployment")')" ]; do
        echo "Waiting for page deploy action to start" && sleep 1;
      done
    when: "{{ push_to_github }}"
  - working_directory: "{{ project_name }}"
    command: >
      gh run list --json databaseId,name
      | jq '.[] | select(.name == "pages build and deployment")'
      | jq '.databaseId'
      | xargs gh run watch --exit-status
    when: "{{ push_to_github }}"
  - command: >
      echo "Finished bootstrapping {{ project_name }}!"
  - command: >
      echo "Check it out at https://github.com/{{ github_account }}/{{ project_name }}"
    when: "{{ push_to_github }}"
